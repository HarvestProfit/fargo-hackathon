(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[0],{243:function(e,t){},331:function(e,t,a){e.exports=a(489)},336:function(e,t,a){},341:function(e,t){},392:function(e,t){},485:function(e,t,a){"use strict";var n=function(){var e=[{defaultValue:null,kind:"LocalArgument",name:"featureCollection"}],t=[{alias:null,args:[{kind:"Variable",name:"featureCollection",variableName:"featureCollection"}],kind:"ScalarField",name:"featureCollectionValue",storageKey:null}];return{fragment:{argumentDefinitions:e,kind:"Fragment",metadata:null,name:"MapQuery",selections:t,type:"Query",abstractKey:null},kind:"Request",operation:{argumentDefinitions:e,kind:"Operation",name:"MapQuery",selections:t},params:{cacheID:"77e48aa68d800527b894b815b6de71f8",id:null,metadata:{},name:"MapQuery",operationKind:"query",text:"query MapQuery(\n  $featureCollection: JSON!\n) {\n  featureCollectionValue(featureCollection: $featureCollection)\n}\n"}}}();n.hash="367140110c0e18d00c677d773488e8ac",e.exports=n},486:function(e,t,a){"use strict";var n=function(){var e=[{alias:null,args:null,concreteType:"CountyConnection",kind:"LinkedField",name:"counties",plural:!1,selections:[{alias:null,args:null,concreteType:"County",kind:"LinkedField",name:"nodes",plural:!0,selections:[{alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"name",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"shape",storageKey:null}],storageKey:null}],storageKey:null}];return{fragment:{argumentDefinitions:[],kind:"Fragment",metadata:null,name:"srcQuery",selections:e,type:"Query",abstractKey:null},kind:"Request",operation:{argumentDefinitions:[],kind:"Operation",name:"srcQuery",selections:e},params:{cacheID:"0a3e303e0f7aed4c420376583654d78a",id:null,metadata:{},name:"srcQuery",operationKind:"query",text:"query srcQuery {\n  counties {\n    nodes {\n      id\n      name\n      shape\n    }\n  }\n}\n"}}}();n.hash="cc64ac8fe5e017dc92ec91b7eea0b809",e.exports=n},489:function(e,t,a){"use strict";a.r(t);var n=a(1),r=a(2),o=a(131),i=a(4),s=a(7),l=a.n(s),c=a(178),u=a.n(c),p=(a(336),a(26)),d=a(141),f=a(153),v=a(201),m=a(93),h=a.n(m),y=a(237),g=a.n(y),b=a(108),w=a(37),k=function(e,t,a,n){var r,o,i=g()(e),s=h()(e),l=a.current.getMap().getContainer().getBoundingClientRect(),c=l.width,u=l.height,p=(r=[[s[0],s[1]],[s[2],s[3]]],o={width:c,height:u},new w.default(o).fitBounds(r)).zoom,d={bearing:0,pitch:0,longitude:i.geometry.coordinates[0],latitude:i.geometry.coordinates[1],zoom:p-1};t&&(d.transitionInterpolator=new b.a,d.transitionDuration=1e3),n(d)},j=Object(v.b)({name:"map",initialState:{active:null,elevationScale:1,extrude:!1,shape:"rectangle",view:"counties",viewMode:"view",viewPort:{latitude:46.8772,longitude:-96.7898,pitch:0,bearing:0,zoom:3}},reducers:{setActive:function(e,t){e.active=t.payload},setActiveGeography:function(e,t){e.active=Object(f.a)({},e.active,{geometry:t.payload})},setElevationScale:function(e,t){e.elevationScale=t.payload},setExtrude:function(e,t){e.extrude=t.payload},setShape:function(e,t){e.shape=t.payload},setView:function(e,t){e.view=t.payload},setViewMode:function(e,t){e.viewMode=t.payload},setViewPort:function(e,t){e.viewPort=t.payload}}}),C=j.actions,O=C.setActive,x=(C.setActiveGeography,C.setElevationScale,C.setExtrude,C.setShape,C.setView),S=(C.setViewMode,C.setViewPort),V=j.reducer,E=a(314),M=a.n(E),F=a(315),P=a.n(F),D=a(311),A=a(515),Q=a(127),R=a(161),q=a(325),L=a(518);var K=a(324),z=a.n(K),B=a(54);var I,J=new B.Environment({network:B.Network.create((function(e,t){return z.a.post("".concat("https://fargo-hackathon-backend-onik9.ondigitalocean.app","/graphql"),{query:e.text,variables:t},{headers:{Accept:"application/json"}}).then((function(e){return e.data}))})),store:new B.Store(new B.RecordSource)}),G=a(198),N=void 0!==I?I:I=a(485),T="pk.eyJ1IjoiamFyeWQiLCJhIjoiY2p5YWRnbnlzMDB4MzNkbzJyMmQ0dm5scyJ9.a0hn83VBMTGMvuXdrFkLoQ",Y=function(e){Object(i.a)(a,e);var t=Object(o.a)(a);function a(e){var r;return Object(n.a)(this,a),(r=t.call(this,e)).processData=function(){if(r.props.data&&r.props.data[r.props.view]&&r.props.data[r.props.view].nodes){var e=r.props.data[r.props.view].nodes.map((function(e){return e.shape?[Object(f.a)({},e.shape,{properties:{fill:[160,160,180,200],rate:e.rate}})]:[]})),t=M.a.flatten(e);r.setState({features:t})}},r.getHexGrid=function(e){var t=h()(e.geometry),a=P()(t,1,{units:"miles"});Object(G.fetchQuery)(J,N,{featureCollection:a}).then((function(e){console.log(e),r.setState({features:e.featureCollectionValue.features})}))},r.onLoad=function(){r.setState({ready:!0})},r.onViewStateChange=function(e){var t=e.viewState;r.props.setViewPort(t)},r.onViewportChange=function(e){r.props.setViewPort(e)},r.updateActiveBoundary=function(e){var t=e.updatedData.features[0],a=t.geometry;r.props.setActive(Object(f.a)({},r.props.active,{boundary:t,geography:a}))},r.state={ready:!1,features:[],hoveredObject:null,pointerX:null,pointerY:null},r.geocoder=l.a.createRef(),r}return Object(r.a)(a,[{key:"componentDidMount",value:function(){this.processData()}},{key:"componentDidUpdate",value:function(e){this.props.data===e.data&&this.props.view===e.view||this.processData()}},{key:"render",value:function(){var e=this,t=this.state,a=t.features,n=t.ready,r=t.hoveredObject,o=t.pointerX,i=t.pointerY,s=this.props,c=s.active,u=s.extrude,d=s.elevationScale,f=s.features,v=s.viewMode,m=s.viewPort,h=[new D.a({id:"value-layer",data:{type:"FeatureCollection",features:a},elevationScale:d,extruded:u,filled:!0,getElevation:function(e){return e.properties.ratio?5*(2+e.properties.ratio):2},getFillColor:function(e){return e.properties.fill?function(e){if(Array.isArray(e))return e.slice(0,4);var t=Object(L.a)(e);return[t.r,t.g,t.b,255]}(e.properties.fill):[160,160,180,200]},getLineColor:[160,160,180,200],pickable:!0,onClick:function(t){return e.getHexGrid(t.object)},onHover:function(t){return e.setState({hoveredObject:t.object,pointerX:t.x,pointerY:t.y})}})];if(c){var y={type:"FeatureCollection",features:[]},g=R.DrawPolygonMode;this.props.active.boundary&&(y=Object(p.featureCollection)([this.props.active.boundary]),g=R.ModifyMode);var w=new R.EditableGeoJsonLayer({id:"geojson-layer",data:y,mode:"edit"===v?g:R.ViewMode,selectedFeatureIndexes:[0],onEdit:this.updateActiveBoundary});h.push(w)}return l.a.createElement("div",{className:"relative w-screen h-screen/2 md:absolute md:h-screen"},l.a.createElement(A.a,{viewState:m,onViewStateChange:this.onViewStateChange,controller:{type:Q.b,doubleClickZoom:!1},layers:h,ContextProvider:b.d.Provider},l.a.createElement(b.c,{mapboxApiAccessToken:T,mapStyle:"mapbox://styles/jaryd/cjpir43gu4i5c2sq8wxi4x4b1",onLoad:this.onLoad,ref:this.props.innerRef,reuseMaps:!0}),n&&l.a.createElement(l.a.Fragment,null,0===f.length&&l.a.createElement("div",{className:"hidden md:flex justify-end fixed top-0 right-0 p-4 z-10",ref:this.geocoder},l.a.createElement(q.a,{clearOnBlur:!0,containerRef:this.geocoder,mapRef:this.props.innerRef,mapboxApiAccessToken:T,onViewportChange:this.onViewportChange})),l.a.createElement("div",{className:"px-4",style:{position:"absolute",right:0,top:"50%",marginTop:"-25px"},context:{map:{version:"1.9"}}},l.a.createElement(b.b,{ref:function(e){null!=e&&(e._uiVersion=2)}}))),r&&l.a.createElement("div",{style:{position:"absolute",zIndex:1,pointerEvents:"none",left:o-5,top:i-5}},l.a.createElement("button",{onClick:function(){return e.getHexGrid(r)}},"Log Object"))))}}]),a}(s.Component);Y.defaultProps={active:null,data:null};var H=Y;var X=Object(d.b)((function(e){return{active:e.map.active,elevationScale:e.map.elevationScale,extrude:e.map.extrude,viewMode:e.map.viewMode,viewPort:e.map.viewPort,view:e.map.view}}),{setActive:O,setViewPort:S})(H),U=function(e){Object(i.a)(a,e);var t=Object(o.a)(a);function a(e){var r;return Object(n.a)(this,a),(r=t.call(this,e)).focusOnFeatures=function(){if(r.state.features.length>0&&null!==r.map){var e=Object(p.featureCollection)(r.state.features);k(e,!0,r.map,r.props.setViewPort)}},r.focusOnFeature=function(e){if(e){var t=Object(p.feature)(e);k(t,!0,r.map,r.props.setViewPort)}},r.state={features:[]},r.map=l.a.createRef(),r}return Object(r.a)(a,[{key:"componentDidUpdate",value:function(e){!this.props.active&&this.state.features.length>0&&this.focusOnFeatures()}},{key:"render",value:function(){var e=this.state.features;return l.a.createElement(X,{data:this.props.data,features:e,innerRef:this.map})}}],[{key:"getDerivedStateFromProps",value:function(e){e.view;var t=e.data;return{features:t.counties?t.counties.nodes.filter((function(e){return null!==e.shape})).map((function(e){return e.shape})):[]}}}]),a}(s.Component);U.defaultProps={active:null};var W,$=Object(d.b)((function(e){return{active:e.map.active,shape:e.map.shape,view:e.map.view}}),{setView:x,setViewPort:S})(U),Z=Object(v.a)({reducer:{map:V}}),_=function(e){Object(i.a)(s,e);var t=Object(o.a)(s);function s(e){var r;return Object(n.a)(this,s),(r=t.call(this,e)).state={env:J,query:void 0!==W?W:W=a(486)},r}return Object(r.a)(s,[{key:"render",value:function(){var e=this.state,t=e.env,a=e.query;return l.a.createElement(G.QueryRenderer,{environment:t,query:a,variables:{},render:function(e){var t=e.props;return t?(console.log(t),l.a.createElement($,{data:t})):null}})}}]),s}(s.Component);u.a.render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(d.a,{store:Z},l.a.createElement(_,null))),document.getElementById("root"))}},[[331,1,2]]]);
//# sourceMappingURL=main.99c8d849.chunk.js.map