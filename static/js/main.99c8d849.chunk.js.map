{"version":3,"sources":["components/__generated__/MapQuery.graphql.js","__generated__/srcQuery.graphql.js","utilities/mapping-helpers.js","slices/map.js","utilities/environment.js","components/Map.js","utilities/color.js","containers/Map.js","App.js","store/index.js","index.js"],"names":["node","v0","v1","hash","module","exports","focusOnFeature","feature","fly","map","onViewStateChange","bounds","viewport","centerPoint","center","box","bbox","current","getMap","getContainer","getBoundingClientRect","width","height","zoom","WebMercatorViewport","fitBounds","viewState","bearing","pitch","longitude","geometry","coordinates","latitude","transitionInterpolator","FlyToInterpolator","transitionDuration","counterSlice","createSlice","name","initialState","active","elevationScale","extrude","shape","view","viewMode","viewPort","reducers","setActive","state","action","payload","setActiveGeography","setElevationScale","setExtrude","setShape","setView","setViewMode","setViewPort","actions","environment","Environment","network","Network","create","operation","variables","axios","post","process","query","text","headers","then","response","data","store","Store","RecordSource","MAPBOX_TOKEN","Map","props","processData","nodes","collection","properties","fill","rate","features","_","flatten","setState","getHexGrid","object","grid","hexGrid","units","fetchQuery","featureCollection","console","log","featureCollectionValue","onLoad","ready","onViewportChange","updateActiveBoundary","boundary","updatedData","geography","hoveredObject","pointerX","pointerY","geocoder","React","createRef","this","prevProps","managedFeatures","layers","GeoJsonLayer","id","type","extruded","filled","getElevation","d","ratio","getFillColor","color","Array","isArray","slice","c","rgb","r","g","b","colorToRGBArray","getLineColor","pickable","onClick","info","onHover","x","y","editOrCreateMode","DrawPolygonMode","ModifyMode","nebula","EditableGeoJsonLayer","mode","ViewMode","selectedFeatureIndexes","onEdit","push","className","controller","MapController","doubleClickZoom","ContextProvider","MapContext","Provider","mapboxApiAccessToken","mapStyle","ref","innerRef","reuseMaps","length","clearOnBlur","containerRef","mapRef","style","position","right","top","marginTop","context","version","_uiVersion","zIndex","pointerEvents","left","Component","defaultProps","connect","App","focusOnFeatures","focus","f","counties","filter","ConnectedApp","configureStore","reducer","mapReducer","Application","env","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99c8d849.chunk.js","sourcesContent":["/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type MapQueryVariables = {|\n  featureCollection: any\n|};\nexport type MapQueryResponse = {|\n  +featureCollectionValue: any\n|};\nexport type MapQuery = {|\n  variables: MapQueryVariables,\n  response: MapQueryResponse,\n|};\n*/\n\n\n/*\nquery MapQuery(\n  $featureCollection: JSON!\n) {\n  featureCollectionValue(featureCollection: $featureCollection)\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"featureCollection\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"featureCollection\",\n        \"variableName\": \"featureCollection\"\n      }\n    ],\n    \"kind\": \"ScalarField\",\n    \"name\": \"featureCollectionValue\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"MapQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"MapQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"77e48aa68d800527b894b815b6de71f8\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"MapQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query MapQuery(\\n  $featureCollection: JSON!\\n) {\\n  featureCollectionValue(featureCollection: $featureCollection)\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '367140110c0e18d00c677d773488e8ac';\n\nmodule.exports = node;\n","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type srcQueryVariables = {||};\nexport type srcQueryResponse = {|\n  +counties: {|\n    +nodes: ?$ReadOnlyArray<?{|\n      +id: string,\n      +name: ?string,\n      +shape: ?any,\n    |}>\n  |}\n|};\nexport type srcQuery = {|\n  variables: srcQueryVariables,\n  response: srcQueryResponse,\n|};\n*/\n\n\n/*\nquery srcQuery {\n  counties {\n    nodes {\n      id\n      name\n      shape\n    }\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"CountyConnection\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"counties\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"County\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"nodes\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"name\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"shape\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"srcQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"srcQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"0a3e303e0f7aed4c420376583654d78a\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"srcQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query srcQuery {\\n  counties {\\n    nodes {\\n      id\\n      name\\n      shape\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = 'cc64ac8fe5e017dc92ec91b7eea0b809';\n\nmodule.exports = node;\n","import bbox from '@turf/bbox';\nimport center from '@turf/center';\nimport { FlyToInterpolator } from 'react-map-gl';\nimport WebMercatorViewport from 'viewport-mercator-project';\n\n/**\n * Fits a zoom level to a set of bounds\n * @param {Array} bounds Array, with a top-left point and bottom-right point\n * @param {{ width: number, height: number }} viewport The current viewport, at least width/height\n * @return {{ zoom: number }} A viewport object that fits the given bounds\n */\nexport const fitBounds = (bounds, viewport) => new WebMercatorViewport(viewport).fitBounds(bounds);\n\n/**\n * Focuses on single feature or a feature collection\n * @param {{ features: [], geometry: [], type: string }} feature The feature to focus on\n * @param {Boolean} fly Should we fly there? Or jump?\n * @param {{ current: Object }} map React ref for the underlying map\n * @param {Function} onViewStateChange callback for updating the viewport\n */\nexport const focusOnFeature = (feature, fly, map, onViewStateChange) => {\n  const centerPoint = center(feature);\n  const box = bbox(feature);\n  const { width, height } = map.current.getMap().getContainer().getBoundingClientRect();\n  const { zoom } = fitBounds([[box[0], box[1]], [box[2], box[3]]], { width, height });\n  const viewState = {\n    bearing: 0,\n    pitch: 0,\n    longitude: centerPoint.geometry.coordinates[0],\n    latitude: centerPoint.geometry.coordinates[1],\n    zoom: zoom - 1,\n  };\n  if (fly) {\n    viewState.transitionInterpolator = new FlyToInterpolator();\n    viewState.transitionDuration = 1000;\n  }\n  onViewStateChange(viewState);\n};\n\n/**\n * A default viewport containing the continental United States.\n */\nexport const defaultViewState = {\n  latitude: 46.8772,\n  longitude: -96.7898,\n  pitch: 0,\n  bearing: 0,\n  zoom: 3,\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { defaultViewState } from '../utilities/mapping-helpers';\n\nexport const counterSlice = createSlice({\n  name: 'map',\n  initialState: {\n    active: null,\n    elevationScale: 1,\n    extrude: false,\n    shape: 'rectangle',\n    view: 'counties',\n    viewMode: 'view',\n    viewPort: defaultViewState,\n  },\n  // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n  // doesn't actually mutate the state because it uses the Immer library,\n  // which detects changes to a \"draft state\" and produces a brand new\n  // immutable state based off those changes\n  reducers: {\n    setActive: (state, action) => {\n      state.active = action.payload;\n    },\n    setActiveGeography: (state, action) => {\n      state.active = {\n        ...state.active,\n        geometry: action.payload,\n      };\n    },\n    setElevationScale: (state, action) => {\n      state.elevationScale = action.payload;\n    },\n    setExtrude: (state, action) => {\n      state.extrude = action.payload;\n    },\n    setShape: (state, action) => {\n      state.shape = action.payload;\n    },\n    setView: (state, action) => {\n      state.view = action.payload;\n    },\n    setViewMode: (state, action) => {\n      state.viewMode = action.payload;\n    },\n    setViewPort: (state, action) => {\n      state.viewPort = action.payload;\n    }\n  },\n});\n\nexport const {\n  setActive,\n  setActiveGeography,\n  setElevationScale,\n  setExtrude,\n  setShape,\n  setView,\n  setViewMode,\n  setViewPort,\n} = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\n// Export the reducer by default\nexport default counterSlice.reducer;\n","import axios from 'axios';\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n} from 'relay-runtime';\n\nfunction fetchQuery(operation, variables) {\n  return axios.post(\n    `${process.env.REACT_APP_BACKEND_URL}/graphql`,\n    {\n      query: operation.text,\n      variables,\n    },\n    { headers: { 'Accept': 'application/json' } },\n  ).then(response => {\n    return response.data\n  });\n}\n\nconst environment = new Environment({\n  network: Network.create(fetchQuery),\n  store: new Store(new RecordSource()),\n});\n\nexport default environment;\n","import _ from 'lodash';\nimport graphql from 'babel-plugin-relay/macro';\nimport bbox from '@turf/bbox';\nimport { featureCollection } from '@turf/helpers';\nimport hexGrid from '@turf/hex-grid';\nimport DeckGL, { MapController, GeoJsonLayer } from 'deck.gl';\nimport { EditableGeoJsonLayer, DrawPolygonMode, ModifyMode, ViewMode } from 'nebula.gl';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { _MapContext as MapContext, NavigationControl, StaticMap } from 'react-map-gl';\nimport GeoCoder from 'react-map-gl-geocoder';\n\nimport colorToRGBArray from '../utilities/color';\nimport environment from '../utilities/environment';\nimport { fetchQuery } from 'react-relay';\n\nconst query = graphql`\n  query MapQuery($featureCollection: JSON!) {\n    featureCollectionValue(featureCollection: $featureCollection)\n  }\n`;\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN; // eslint-disable-line\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ready: false,\n      features: [],\n      hoveredObject: null,\n      pointerX: null,\n      pointerY: null,\n    };\n    this.geocoder = React.createRef();\n  }\n\n  componentDidMount() {\n    this.processData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data || this.props.view !== prevProps.view) {\n      this.processData();\n    }\n  }\n\n  processData = () => {\n    if (!this.props.data || !this.props.data[this.props.view] || !this.props.data[this.props.view].nodes) {\n      return;\n    }\n    const collection = this.props.data[this.props.view].nodes.map((node) => {\n      if (!node.shape) {\n        return [];\n      }\n      return [{ ...node.shape, properties: { fill: [160, 160, 180, 200], rate: node.rate } }];\n    });\n    const features = _.flatten(collection);\n    this.setState({ features });\n  }\n\n  getHexGrid = (object) => {\n    const box = bbox(object.geometry);\n    const grid = hexGrid(box, 1, { units: 'miles' });\n    fetchQuery(environment, query, { featureCollection: grid }).then((data) => {\n      console.log(data);\n      this.setState({ features: data.featureCollectionValue.features })\n    });\n  }\n\n  onLoad = () => {\n    this.setState({ ready: true });\n  }\n\n  onViewStateChange = ({ viewState }) => {\n    this.props.setViewPort(viewState);\n  }\n\n  onViewportChange = (viewState) => {\n    this.props.setViewPort(viewState);\n  }\n\n  updateActiveBoundary = ({ updatedData }) => {\n    const boundary = updatedData.features[0];\n    const geography = boundary.geometry;\n    this.props.setActive({\n      ...this.props.active,\n      boundary,\n      geography,\n    });\n  }\n\n  render() {\n    const { features: managedFeatures, ready, hoveredObject, pointerX, pointerY } = this.state;\n    const { active, extrude, elevationScale, features, viewMode, viewPort } = this.props;\n\n    const layers = [\n      new GeoJsonLayer({\n        id: 'value-layer',\n        data: { type: 'FeatureCollection', features: managedFeatures },\n        elevationScale,\n        extruded: extrude,\n        filled: true,\n        getElevation: (d) => (d.properties.ratio ? (2 + d.properties.ratio) * 5 : 2),\n        getFillColor: (d) => (d.properties.fill ? colorToRGBArray(d.properties.fill) : [160, 160, 180, 200]),\n        getLineColor: [160, 160, 180, 200],\n        pickable: true,\n        onClick: (info) => this.getHexGrid(info.object),\n        onHover: (info) => this.setState({\n          hoveredObject: info.object,\n          pointerX: info.x,\n          pointerY: info.y,\n        }),\n      }),\n    ];\n\n    if (active) {\n      let collection = { type: 'FeatureCollection', features: [] };\n      let editOrCreateMode = DrawPolygonMode;\n      if (this.props.active.boundary) {\n        collection = featureCollection([this.props.active.boundary]);\n        editOrCreateMode = ModifyMode;\n      }\n      const nebula = new EditableGeoJsonLayer({\n        id: 'geojson-layer',\n        data: collection,\n        mode: viewMode === 'edit' ? editOrCreateMode : ViewMode,\n        selectedFeatureIndexes: [0],\n        onEdit: this.updateActiveBoundary,\n      });\n      layers.push(nebula);\n    }\n\n    return (\n      <div className=\"relative w-screen h-screen/2 md:absolute md:h-screen\">\n        <DeckGL\n          viewState={viewPort}\n          onViewStateChange={this.onViewStateChange}\n          controller={{ type: MapController, doubleClickZoom: false }}\n          layers={layers}\n          ContextProvider={MapContext.Provider}\n        >\n          <StaticMap\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            mapStyle=\"mapbox://styles/jaryd/cjpir43gu4i5c2sq8wxi4x4b1\"\n            onLoad={this.onLoad}\n            ref={this.props.innerRef}\n            reuseMaps\n          />\n          {ready && (\n            <>\n              {features.length === 0 && (\n                <div className=\"hidden md:flex justify-end fixed top-0 right-0 p-4 z-10\" ref={this.geocoder}>\n                  <GeoCoder\n                    clearOnBlur\n                    containerRef={this.geocoder}\n                    mapRef={this.props.innerRef}\n                    mapboxApiAccessToken={MAPBOX_TOKEN}\n                    onViewportChange={this.onViewportChange}\n                  />\n                </div>\n              )}\n              <div className=\"px-4\" style={{ position: 'absolute', right: 0, top: '50%', marginTop: '-25px' }} context={{ map: { version: '1.9' } }}>\n                {/* eslint-disable no-underscore-dangle,no-param-reassign  */}\n                <NavigationControl ref={(ref) => { if (ref != null) { ref._uiVersion = 2; } }} />\n                {/* eslint-enable no-underscore-dangle,no-param-reassign  */}\n              </div>\n            </>\n          )}\n          {hoveredObject && (\n            <div style={{ position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX - 5, top: pointerY - 5 }}>\n              <button onClick={() => this.getHexGrid(hoveredObject)}>Log Object</button>\n            </div>\n          )}\n        </DeckGL>\n      </div>\n    );\n  }\n}\n\nMap.propTypes = {\n  active: PropTypes.shape({ boundary: PropTypes.shape({}) }),\n  data: PropTypes.shape({}),\n  elevationScale: PropTypes.number.isRequired,\n  extrude: PropTypes.bool.isRequired,\n  innerRef: PropTypes.shape({ current: PropTypes.instanceOf(StaticMap) }).isRequired,\n  features: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  view: PropTypes.string.isRequired,\n  viewMode: PropTypes.string.isRequired,\n  viewPort: PropTypes.shape({}).isRequired,\n  setActive: PropTypes.func.isRequired,\n  setViewPort: PropTypes.func.isRequired,\n};\n\nMap.defaultProps = {\n  active: null,\n  data: null,\n};\n\nexport default Map;\n","import { rgb } from 'd3-color';\n\nexport default function colorToRGBArray(color) {\n  if (Array.isArray(color)) {\n    return color.slice(0, 4);\n  }\n  const c = rgb(color);\n  return [c.r, c.g, c.b, 255];\n}\n","import { connect } from 'react-redux';\n\nimport { setActive, setViewPort } from '../slices/map';\nimport Map from '../components/Map';\n\nfunction mapStateToProps(state) {\n  return {\n    active: state.map.active,\n    elevationScale: state.map.elevationScale,\n    extrude: state.map.extrude,\n    viewMode: state.map.viewMode,\n    viewPort: state.map.viewPort,\n    view: state.map.view,\n  };\n}\n\nexport default connect(mapStateToProps, { setActive, setViewPort })(Map);\n","import { feature, featureCollection } from '@turf/helpers';\r\nimport PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setView, setViewPort } from './slices/map';\r\nimport { focusOnFeature } from './utilities/mapping-helpers';\r\n\r\nimport Map from './containers/Map';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      features: [],\r\n    }\r\n    this.map = React.createRef();\r\n  }\r\n\r\n  static getDerivedStateFromProps({ view, data }) {\r\n    let features = [];\r\n    switch (view) {\r\n      default:\r\n        features = data.counties\r\n          ? data.counties.nodes.filter((node) => node.shape !== null).map((node) => node.shape) : [];\r\n    }\r\n    return { features };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!this.props.active && this.state.features.length > 0) {\r\n      this.focusOnFeatures();\r\n    }\r\n  }\r\n\r\n  focusOnFeatures = () => {\r\n    if (this.state.features.length > 0 && this.map !== null) {\r\n      const focus = featureCollection(this.state.features);\r\n      focusOnFeature(focus, true, this.map, this.props.setViewPort);\r\n    }\r\n  }\r\n\r\n  focusOnFeature = (f) => {\r\n    if (f) {\r\n      const focus = feature(f);\r\n      focusOnFeature(focus, true, this.map, this.props.setViewPort);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { features } = this.state;\r\n\r\n    return (\r\n      <Map\r\n        data={this.props.data}\r\n        features={features}\r\n        innerRef={this.map}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  active: PropTypes.shape({}),\r\n  data: PropTypes.shape({\r\n    counties: PropTypes.shape({}),\r\n  }).isRequired,\r\n  view: PropTypes.string.isRequired,\r\n  setViewPort: PropTypes.func.isRequired,\r\n};\r\n\r\nApp.defaultProps = {\r\n  active: null,\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    active: state.map.active,\r\n    shape: state.map.shape,\r\n    view: state.map.view,\r\n  };\r\n}\r\n\r\nconst ConnectedApp = connect(mapStateToProps, { setView, setViewPort })(App);\r\n\r\nexport default ConnectedApp;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport mapReducer from '../slices/map';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    map: mapReducer,\r\n  },\r\n});\r\n","import graphql from 'babel-plugin-relay/macro';\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport { QueryRenderer } from 'react-relay';\r\n\r\nimport environment from './utilities/environment';\r\n\r\nclass Application extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      env: environment,\r\n      query: graphql`\r\n        query srcQuery {\r\n          counties {\r\n            nodes {\r\n              id\r\n              name\r\n              shape\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { env, query } = this.state;\r\n\r\n    return (\r\n      <QueryRenderer\r\n        environment={env}\r\n        query={query}\r\n        variables={{}}\r\n        render={({ props }) => {\r\n          if (!props) {\r\n            return null;\r\n          }\r\n          console.log(props);\r\n          return (\r\n            <App\r\n              data={props}\r\n            />\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Application />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}